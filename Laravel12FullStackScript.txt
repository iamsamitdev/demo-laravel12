================================
💡 Full Stack Laravel 12 with InertiaJS 2 and React  💡
================================
⚡ DAY 1
1.แนวทางการพัฒนาเว็บแอพด้วย Laravel
2.อัพเดทสิ่งใหม่และพื้นฐานใน Laravel 12
3.การเตรียมเครื่องมือและการติดตั้ง Laravel 12
-------------------------------------------------------
🚀1. การเตรียมเครื่องมือและความพร้อม
💻 XAMPP & PHP 8.2.x
---
php -v

💻 MySQL / MariaDB
---
mysql --version

💻 Node JS 20.x and up
---
node -v
npm -v
ppx -v

💻 Composer
---
composer --version

💻 PostgreSQL 15 and up
---
psql --version

💻 Git
---
git version

💻 VSCode
---
code -v

🚀2.Setup Project
---
</> Server Prerequisites to Install Laravel 12

PHP >= 8.2
Ctype PHP Extension
cURL PHP Extension
DOM PHP Extension
Fileinfo PHP Extension
Filter PHP Extension
Hash PHP Extension
Mbstring PHP Extension
OpenSSL PHP Extension
PCRE PHP Extension
PDO PHP Extension
Session PHP Extension
Tokenizer PHP Extension
XML PHP Extension

การติดตั้ง
---
</> ติดตั้งเวอร์ชั่นล่าสุด (12.x)
💻 composer create-project  laravel/laravel sample-laravel12

หมายเหตุ ติดตั้งระบุเลข Version เฉพาะ
💻 composer create-project laravel/laravel:^12.0 sample-laravel12

</> การรันโปรเจ็กต์
---
💻 php artisan serve
ปกติจะรันอยู่ที่ http://localhost:8000

หากต้องการ run ที่ port อื่น 
💻php artisan serve  --port=9000

</> Laravel Basic Routing
---

</> Basic Routing
---

Route::get('/', function () {
    return 'Hello World!';
});

Route::get('about', function(){
    return 'My about page';
});

-------------------------------------------------------
⚡ DAY 2
-------------------------------------------------------
</> Routing with Parameters
---
Route::get('user/{id}', function ($id) {
    return 'User:' . $id;
});

Route::get('posts/{post}/comments/{comment}', function ($postID, $commentID) {
    return 'Post:' . $postID . '<br>Comment:' . $commentID;
});

Route::get('member/{name?}', function ($name = null) {
    return 'Hello' . $name;
});

</> Regular Expression Constraints
---
Route::get('category/{name}', function ($name) {
    return $name;
})->where('name', '[A-Za-z]+');

Route::get('group/{id}', function ($id) {
    return $id;
})->where('id','[0-9]+');

Route::get('product/{id}/{name}', function ($id, $name) {
    return 'Product ID:'.$id.'<br>Product name:'.$name;
})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);

</> Named Routes
---
Route::get('guest/showroom/data/{name?}',function($name=null){
    return'Hello'.$name;
})->name('guestprofile');

Route post,put,delete
---
Route::post('user/profile',function(){
    return'POST';
});

Route::put('user/profile',function(){
    return'PUT';
});

Route::delete('user/profile',function(){
    return'DELETE';
});

</> พื้นฐานการทำงานกับ Controller ใน Laravel 12
---
การสร้าง Controller ใหม่
php artisan make:controller HomeController

</> การเรียกใช้งาน Controller ใน routes (web.php)
---
Method 1:

Route::get(
  'profile’,
  'App\Http\Controllers\HomeController@showprofile’
);

Method 2:

use App\Http\Controllers\HomeController;

Route::get(
  'profile’,
  [HomeController::class,'showprofile’]
);

</> Route Prefixes
---
Route::group(['prefix' => 'admin'], function () {
    Route::get('users', function ()    {
        // Matches The "/admin/users" URL
    });
});

Route::group(['prefix' => 'accounts/{account_id}'], function () {
    Route::get('detail', function ($account_id)    {
        // Matches The accounts/{account_id}/detail URL
    });
});


🚀3.PostgreSQL/MySQL Connect

</> การทำงานกับฐานข้อมูล
---
เชื่อมต่อฐานข้อมูล PostgreSQL
แก้ไขไฟล์ .env
---
# SQLite
# DB_CONNECTION=sqlite

# MySQL
# DB_CONNECTION=mysql
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=samplelaraveldb
DB_USERNAME=postgres
DB_PASSWORD=123456

</> คำสั่ง Running Migrations
---
💻 php artisan migrate

</> สรุปคำสั่ง สร้าง migration และ db:seed พร้อมกัน
---
💻 php artisan migrate:fresh --seed

</> การสร้าง API ใน Laravel 12
---
ติดตั้ง api
---
💻 php artisan install:api

🚀4.API Controller & Methods

</> ทดสอบเขียน api ที่ไฟล์ routes/api.php
---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

// Route::get('/user', function (Request $request) {
//     return $request->user();
// })->middleware('auth:sanctum');

// กำหนดตัวแปร $users
$users = [
    [
        'name' => 'John Doe',
        'email' => 'john@email.com',
    ],
    [
        'name' => 'Jane Doe',
        'email' => 'jane@email.com',
    ]
];

// GET /api/user
Route::get('/user',  function (Request $request) use ($users){
    return $users;
});

// POST /api/user
// Payload: { "name": "John Doe", "email": "john@email.com"}
Route::post('/user', function (Request $request)  use ($users){
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Add the new user to the users array
    $users[] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// PUT /api/user/1
// Payload: { "name": "Jack Doe", "email": "jack@email.com"}
Route::put('/user/{id}', function (Request $request, $id) use ($users) {
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Update the user with the given id
    $users[$id] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// DELETE /api/user/1
Route::delete('/user/{id}', function (Request $request, $id) use ($users) {
    // Remove the user with the given id
    unset($users[$id]);

    // Return the name and email
    return $users;
});
